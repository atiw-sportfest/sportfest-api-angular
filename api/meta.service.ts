/**
 * Sportfest Backend
 * Sportfest backend
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Authentication } from '../model/authentication';
import { Script } from '../model/script';
import { Typ } from '../model/typ';
import { User } from '../model/user';
import { ValidationResult } from '../model/validationResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MetaService {

    protected basePath = 'https://sportfest.atiw.de/backend';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * JWT Login
     * 
     * @param user User
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticatePost(user?: User, observe?: 'body', reportProgress?: boolean): Observable<Authentication>;
    public authenticatePost(user?: User, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Authentication>>;
    public authenticatePost(user?: User, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Authentication>>;
    public authenticatePost(user?: User, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Authentication>(`${this.basePath}/authenticate`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Syntax-Prüfung der Regel-DSL
     * Muss aufgrund eines Bugs im TypeScript-Generator als Objekt versendet werden.
     * @param script DSL-Skript
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dslCheckRegelPost(script?: Script, observe?: 'body', reportProgress?: boolean): Observable<ValidationResult>;
    public dslCheckRegelPost(script?: Script, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ValidationResult>>;
    public dslCheckRegelPost(script?: Script, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ValidationResult>>;
    public dslCheckRegelPost(script?: Script, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<ValidationResult>(`${this.basePath}/dsl/check/regel`,
            script,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sportfest zurücksetzen
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sportfestDelete(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sportfestDelete(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sportfestDelete(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sportfestDelete(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/sportfest`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sportfest beenden
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sportfestPost(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sportfestPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sportfestPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sportfestPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/sportfest`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Typen auflisten
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public typGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Typ>>;
    public typGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Typ>>>;
    public typGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Typ>>>;
    public typGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Typ>>(`${this.basePath}/typ`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Typ anlegen
     * 
     * @param typ Typ
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public typPost(typ?: Typ, observe?: 'body', reportProgress?: boolean): Observable<Typ>;
    public typPost(typ?: Typ, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Typ>>;
    public typPost(typ?: Typ, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Typ>>;
    public typPost(typ?: Typ, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Typ>(`${this.basePath}/typ`,
            typ,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Typ löschen
     * 
     * @param typid Typ-ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public typTypidDelete(typid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public typTypidDelete(typid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public typTypidDelete(typid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public typTypidDelete(typid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (typid === null || typid === undefined) {
            throw new Error('Required parameter typid was null or undefined when calling typTypidDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/typ/${encodeURIComponent(String(typid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Typ abrufen
     * 
     * @param typid Typ-ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public typTypidGet(typid: number, observe?: 'body', reportProgress?: boolean): Observable<Typ>;
    public typTypidGet(typid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Typ>>;
    public typTypidGet(typid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Typ>>;
    public typTypidGet(typid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (typid === null || typid === undefined) {
            throw new Error('Required parameter typid was null or undefined when calling typTypidGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Typ>(`${this.basePath}/typ/${encodeURIComponent(String(typid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Typ ändern
     * 
     * @param typid Typ-ID
     * @param typ Typ
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public typTypidPost(typid: number, typ?: Typ, observe?: 'body', reportProgress?: boolean): Observable<Typ>;
    public typTypidPost(typid: number, typ?: Typ, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Typ>>;
    public typTypidPost(typid: number, typ?: Typ, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Typ>>;
    public typTypidPost(typid: number, typ?: Typ, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (typid === null || typid === undefined) {
            throw new Error('Required parameter typid was null or undefined when calling typTypidPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Typ>(`${this.basePath}/typ/${encodeURIComponent(String(typid))}`,
            typ,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
